--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--accepting rule at line 154("begin")
Next token is token tBEGIN ()
Reducing stack by rule 5 (line 98):
-> $$ = nterm opt_declarations ()
Entering state 11
Stack now 0 11
Next token is token tBEGIN ()
Shifting token tBEGIN ()
Entering state 24
Stack now 0 11 24
Reading a token
--accepting rule at line 80("
")
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--accepting rule at line 82("  ")
CASE 2
Next token is token '{' ()
Shifting token '{' ()
Entering state 37
Stack now 0 11 24 37
Reading a token
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--accepting rule at line 264("writeln")
Next token is token tWRITELN ()
Reducing stack by rule 5 (line 98):
-> $$ = nterm opt_declarations ()
Entering state 65
Stack now 0 11 24 37 65
Next token is token tWRITELN ()
Shifting token tWRITELN ()
Entering state 105
Stack now 0 11 24 37 65 105
Reading a token
--(end of buffer or a NUL)
--accepting rule at line 312(" ")
--accepting rule at line 183(""")
--(end of buffer or a NUL)
--accepting rule at line 191("s")
--(end of buffer or a NUL)
--accepting rule at line 191("t")
--(end of buffer or a NUL)
--accepting rule at line 191("r")
--(end of buffer or a NUL)
--accepting rule at line 191("i")
--(end of buffer or a NUL)
--accepting rule at line 191("n")
--(end of buffer or a NUL)
--accepting rule at line 191("g")
--(end of buffer or a NUL)
--accepting rule at line 185(""")
Next token is token tTEXT ()
Shifting token tTEXT ()
Entering state 53
Stack now 0 11 24 37 65 105 53
Reducing stack by rule 89 (line 254):
   $1 = token tTEXT ()
-> $$ = nterm text ()
Entering state 60
Stack now 0 11 24 37 65 105 60
Reading a token
--(end of buffer or a NUL)
--accepting rule at line 80("
")
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--accepting rule at line 82("  ")
CASE 1
CASE 1a (levels to pop = 0)
Next token is token ';' ()
Reducing stack by rule 61 (line 204):
   $1 = nterm text ()
-> $$ = nterm expr ()
Entering state 135
Stack now 0 11 24 37 65 105 135
Next token is token ';' ()
Reducing stack by rule 52 (line 189):
   $1 = nterm expr ()
-> $$ = nterm exprs ()
Entering state 140
Stack now 0 11 24 37 65 105 140
Next token is token ';' ()
Reducing stack by rule 38 (line 159):
   $1 = token tWRITELN ()
   $2 = nterm exprs ()
-> $$ = nterm instruction ()
Entering state 109
Stack now 0 11 24 37 65 109
Next token is token ';' ()
Shifting token ';' ()
Entering state 143
Stack now 0 11 24 37 65 109 143
Reducing stack by rule 14 (line 113):
   $1 = nterm instruction ()
   $2 = token ';' ()
-> $$ = nterm instructions ()
Entering state 108
Stack now 0 11 24 37 65 108
Reading a token
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--accepting rule at line 257("return")
Next token is token tRETURN ()
Shifting token tRETURN ()
Entering state 100
Stack now 0 11 24 37 65 108 100
Reading a token
--(end of buffer or a NUL)
--accepting rule at line 312(" ")
--(end of buffer or a NUL)
--accepting rule at line 171("0")
Next token is token tINTEGER ()
Shifting token tINTEGER ()
Entering state 51
Stack now 0 11 24 37 65 108 100 51
Reducing stack by rule 59 (line 202):
   $1 = token tINTEGER ()
-> $$ = nterm expr ()
Entering state 137
Stack now 0 11 24 37 65 108 100 137
Reading a token
--accepting rule at line 80("
")
--(end of buffer or a NUL)
--accepting rule at line 124("e")
should restart 1 functions at 4
Next token is token '}' ()
Reducing stack by rule 42 (line 165):
   $1 = token tRETURN ()
   $2 = nterm expr ()
-> $$ = nterm instruction ()
Entering state 142
Stack now 0 11 24 37 65 108 142
Next token is token '}' ()
Reducing stack by rule 15 (line 114):
   $1 = nterm instructions ()
   $2 = nterm instruction ()
-> $$ = nterm instructions ()
Entering state 108
Stack now 0 11 24 37 65 108
Next token is token '}' ()
Reducing stack by rule 12 (line 109):
   $1 = nterm instructions ()
-> $$ = nterm opt_instructions ()
Entering state 107
Stack now 0 11 24 37 65 107
Next token is token '}' ()
Shifting token '}' ()
Entering state 141
Stack now 0 11 24 37 65 107 141
Reducing stack by rule 4 (line 95):
   $1 = token '{' ()
   $2 = nterm opt_declarations ()
   $3 = nterm opt_instructions ()
   $4 = token '}' ()
-> $$ = nterm block ()
Entering state 38
Stack now 0 11 24 38
Reading a token
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--(end of buffer or a NUL)
--accepting rule at line 155("end")
Next token is token tEND ()
Shifting token tEND ()
Entering state 66
Stack now 0 11 24 38 66
Reducing stack by rule 3 (line 92):
   $1 = token tBEGIN ()
   $2 = nterm block ()
   $3 = token tEND ()
-> $$ = nterm program ()
Entering state 25
Stack now 0 11 25
Reducing stack by rule 2 (line 89):
   $1 = nterm opt_declarations ()
   $2 = nterm program ()
-> $$ = nterm file ()
Entering state 10
Stack now 0 10
Reading a token
--accepting rule at line 80("
")
--(end of buffer or a NUL)
--accepting rule at line 123("
")
--(end of buffer or a NUL)
--EOF (start condition 3)
AT <<EOF>> OPEN INDENTS ARE 0
Now at end of input.
Shifting token "end of file" ()
Entering state 23
Stack now 0 10 23
Stack now 0 10 23
Cleanup: popping token "end of file" ()
Cleanup: popping nterm file ()
