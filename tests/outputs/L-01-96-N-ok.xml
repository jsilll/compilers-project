<sequence_node size='2'>
  <declaration_node name='f' qualifier='private' type='var'>
  <initializer>
      <lambda_node' type='integer'>
      <arguments>
          <sequence_node size='1'>
            <declaration_node name='i' qualifier='private' type='integer'>
            </declaration_node>
          </sequence_node>
      </arguments>
        <block_node>
          <declarations>
            <sequence_node size='1'>
              <declaration_node name='n' qualifier='private' type='integer'>
              </declaration_node>
            </sequence_node>
          </declarations>
          <instructions>
            <sequence_node size='2'>
              <if_else_node>
                <condition>
                  <eq_node>
                    <rvalue_node>
                        <variable_node>i</variable_node>
                    </rvalue_node>
                    <integer_node>0</integer_node>
                  </eq_node>
                </condition>
                <then>
                  <block_node>
                    <declarations>
                      <sequence_node size='0'>
                      </sequence_node>
                    </declarations>
                    <instructions>
                      <sequence_node size='1'>
                        <evaluation_node>
                          <assignment_node>
                          <variable_node>n</variable_node>
                              <integer_node>0</integer_node>
                          </assignment_node>
                        </evaluation_node>
                      </sequence_node>
                    </instructions>
                  </block_node>
                </then>
                <else>
                  <block_node>
                    <declarations>
                      <sequence_node size='0'>
                      </sequence_node>
                    </declarations>
                    <instructions>
                      <sequence_node size='2'>
                        <evaluation_node>
                          <add_node>
                            <assignment_node>
                            <variable_node>n</variable_node>
                                <rvalue_node>
                                    <variable_node>i</variable_node>
                                </rvalue_node>
                            </assignment_node>
                            <function_call_node name='@'>
                            <arguments>
                                <sequence_node size='1'>
                                  <sub_node>
                                    <rvalue_node>
                                        <variable_node>i</variable_node>
                                    </rvalue_node>
                                    <integer_node>1</integer_node>
                                  </sub_node>
                                </sequence_node>
                            </arguments>
                            </function_call_node>
                          </add_node>
                        </evaluation_node>
                        <return_node>
                            <rvalue_node>
                                <variable_node>n</variable_node>
                            </rvalue_node>
                        </return_node>
                      </sequence_node>
                    </instructions>
                  </block_node>
                </else>
              </if_else_node>
              <return_node>
                  <integer_node>9</integer_node>
              </return_node>
            </sequence_node>
          </instructions>
        </block_node>
      </lambda_node>
  </initializer>
  </declaration_node>
  <program_node>
      <block_node>
        <declarations>
          <sequence_node size='0'>
          </sequence_node>
        </declarations>
        <instructions>
          <sequence_node size='2'>
            <print_node>
              <sequence_node size='1'>
                <function_call_node name='f'>
                <arguments>
                    <sequence_node size='1'>
                      <integer_node>3</integer_node>
                    </sequence_node>
                </arguments>
                </function_call_node>
              </sequence_node>
            </print_node>
            <return_node>
                <integer_node>0</integer_node>
            </return_node>
          </sequence_node>
        </instructions>
      </block_node>
  </program_node>
</sequence_node>
